Rasute datoteke ili direktne datoteke:
 - slogu ili grupi slogova se pristupa direktno na osnovu poznavanja adrese memorijske lokacije u kojoj su smešteni
 - adresa lokacija se dobija transformacijom vrednosti identifikatora sloga u adresu

Identifikator - skup obeležja čije vrednosti jednoznačno određuju slogove datoteke
Vrste transformacija vrednosti identifikatora u adresu:
 - deterministička (jedna vrednost identifikatora - jedna adresa, jedna adresa - jedna vrednost identifikatora)
 - pribabilistička (jedna vrednost identifikatora - jedna adresa, jedna adresa - više vrednosti identifikatora)

FSP rasute datoteke ne sadrži informaciju o vezama između slogova logičke strukture datoteke
U dve fizički susedne lokacije mogu, a ne moraju, biti memorisani logički susedni slogovi (slogovi su random rasuti po memorijskom prostoru daoteke)

Baket - blok kod rasutih datoteke, faktor baketiranja b = faktor blokiranja f
Vrste rasutih datoteka sa obzirom na način alokacije memorijskog prostora - statičke i dinamičke

Opšti postupak formiranja statičke rasute datoteke:
 - dodeljuje se Q lokacija
 - faktor popunjenosti q = N/Q
 - redosled smeštanja slogova u datoteku je nevažan (u oba slučaja transformacije)
 - slogovi se upisuju saglasno hronološkom redosledu nastanka
 - upisu sloga prethodi neuspešno traženje
 - slog se smešta u baket sa izračunatom adresom

~

Statičke rasute datoteke sa probabilističkom transformacijom:
 - ključ često uzima vrednost iz veoma velikog opsega mogućih vrednosti
 - veličina adresnog prostora dodeljenog datoteci je po pravilu mnogo manji od broja mogućih vrednosti ključa

Metode probabilističke transformacije se uvode kako bi se prevazišli nedostaci do kojih dovodi deterministička transformacija
Ciljevi:
 - što ravnomernija raspodela slogova u adresnom prostoru
 - pseudoslučajna transformacija vrednosti ključa u adresu
 - pravilna upotreba adresnog prostora

Koraci:
 - pretvaranje nenumeričke u numeričku vrednost ključa
 - pretvaranje numeričke vrednosti ključa u pseudoslučajan broj
 - dovođenje vrednosti pseudoslučajnog broja u opseg dozvoljenih vrednosti relativne adrese
 - pretvaranje realtivne adrese u mašinsku adresu (zadatak metode pristupa)
Tri često upotrebljivane metode probabilističke transformacije:
 - metoda ostatka pri deljenju
 - metoda centralnih cifara kvadrata ključa
 - metoda preklapanja

Karakteristike probabilističke transformacije:
 - pojava slogova sinonima (različiti ključevi -> ista relativna adresa)
 - matični baket (baket čija je relativna adresa rezultat transformacije)
 - primarni slog (slog koji je smešten u matički baket)
 - prekoračial (slog koji ne može da se smesti u matični baket usled njegove popunjenosti)

Verovatnoća pojave sinonima zavisi od raspodela vrednosti ključa unutar opsega dozvoljenih vrednosti, odabrane metode transformacije, faktora popunjenosti memorijskog prostora...
Broj prekoračilaca će biti manji što je faktor popunjenosti manji, a faktor baketiranja veći
Pojava prekoračilaca je neminovna

Vrste statičkih rasutih organizacija:
 - sa jedinstvenim adresnim prostorom
 - sa zonom prekoračenja (serijska ili spregnuta zona prekoračenja)

---

Formiranje rasute datoteke:
 - potpuno uz pomoć metode pristupa ili
 - delom uz pomoć aplikativnog programa i delom uz pomoć relativne metode pristupa
Koraci:
 - inicijalno alociranje prazne datoteke (statičko)
 - upisivanje slogova u rasutu datoteku
Načini formiranja:
 - u jednom prolazu (slogovi se upisuju u hronološkom redosledu nastanka)
 - u dva prolaza (1 - samo oni slogovi koji će biti smešteni u matične bakete, 2 - preostali slogovi)

Traženje sloga u rasutoj datoteci:
 - traženje logički narednog = slućajno odabranog sloga
 - ako se slog ne nađe u matičnom baketu, a matični baket ima prekoračilaca, traženje se nastavlja

Obrada rasute datoteke sa probabilističkom transformacijom:
 - nepogodna za korišćenje u ulozi osnovne vodeće datoteke 
 - mogu se obrađivati u režimu redosledne i u režimu direktne obrade
 - performanse su iste

Oblasti primene:
 - svi mrežni SUBP
 - pojedini relacioni SUBP
 - namenske baze podataka
Prednost:
 - mali očekivani broj pristupa pri traženju slučajno odabranog sloga
Nedostaci:
 - potreba da se unapred odredi veličina datoteke
 - problem izbora probabilističke transformacije
 - broj pristupa pri traženju može biti nepredvidivo velik

~

Za datoteke koje se skoro isključivo obrađuju u režimu direktne obrade i čiji se sadržaj intezivno menja moguće je uvesti dinamičku rasutu organizaciju
Postoji više vrsta struktura dinamički rasutih datoteka

Struktura se sastoji iz adresara i zone podataka sa baketima
Adresar - sadrži niz pokazivača dužine 2^d sa adresama baketa i druga polja 
Zona podataka sa baketima - svaki baket sadrži zaglavlje i bar jedan slog
Adresar i zona podatak se realizuju kao dve posebne datoteke

Adresar - mala pomoćna struktura podataka, koristi se za pristup baketima na disku
Sadrži niz od 2^d pokazivača ka baketima u zoni podataka, broj bitova najveće težine funkcije transformacije d i faktor baketiranja b 
Ceo adresar se može smestiti u OM (to se dešava pri otvaranju datoteke)
Indeksi niza pokazivača se ponekad predstavljaju kao kompletno binarno stavlo u čijim listovima se nalaze pokazivači ka baketima

Zona podataka sadrži bakete, svaki sadrži najviše b slogova
Svaki baket sadrži zaglavlje sa poljima d' (aktuelan broj bitova u baketu) i m (?)

Kako bi se izbeglo snižavanje poželjnog stepena slučajnosti transformacije, vrednost ključa k se podvrgavaju netrivijalnoj transformaciji i redosled binarnih pozicija rezultata transformacije se invertuje

Formiranje dinamičke rasute datoteke - u režimu direktne obrade:
 - vrednosti slogova ulazne serijske datoteke podvrgavaju se transformaciji
 - od rezultata se koristi d bitova najveće težine kao indeks u jednodimenzionalnom nizu pokazivača ka baketima
 - baket čija adresa je dobijena korišćenjem tog niza u adresaru se prenosi u OM
 - ako slog sa istom vrednošću ključa u baketu ne postoji, upisuje se novi slog u baket

Tri slučaja upisa:
 - prost upis (upis u prvu slobodnu lokaciju u baketu)
 - upis koji dovodi do deljenja baketa
 - uspi koji dovodi do deljenja baketa i udvostručavanja dužine niza pokazivača u adresaru

Traženje logički narednog i slučajno odabranog sloga se vrši korišćenjem istog algoritma
Ključ se transformiše, nađe se odgovarajući baket i traži se slog u tom baketu
Transformacija ključa se vrši u OM (ne zahteva pristup disku), jedini pristup disku je čitanje baketa

Ažuriranje dinamičke rasute datoteke - svakom upisu ili brisanju prethodi jedno traženje
Upis novog sloga - zahteva dva prisupa datoteci ako ne dovodi do prepunjenja baketa, jedan za traženje, drugi za upis, ili tri ako dovodi do prepunjenja baketa

Tri slučaja brisanja:
 - prosto brisanje (samo obrišeš)
 - spajanje susednih baketa, bez uticaja na veličinu adresara (spajaju se baketi prijatelji)
 - spajanje susednih baketa sa smanjenjem dužine niza pokazivača na pola (nakon spajanja na svaki baket ukazuju po dva pokazivača u adresaru)
Potrebna su tri pristupa datoteci - traženje sloga, učitavanje susednog baketa, upis ažuriranog/novodobijenog baketa

Dinamičke rasute datoteke su nepogodne za korišćenje u ulozi osnovne vodeće datoteke jer im fizička struktura ne sadrži podatke o LSP
Mogu se koristii kao obrađivane i vodeće u režimu direktne obrade

Karakteristike dinamičke rasute datoteke:
 - ne proizvodi slogove prekoračioce
 - datoteka se širi i skulja u zavisnosti od broja aktuelnih slogova
 - broj pristupa pri traženju ne zavisi od veličine datoteke (veoma pogodne za direktnu obradu)
 - nisu pogodne za redoslednu obradu
